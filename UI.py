# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import traceback
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import addNewSound
import addSrt
import video_to_txt
import voice_get_text
# 移除冗余模块，统一使用 unified_speech_synthesis
import unified_speech_synthesis
import generateWav
from PyQt5.QtWidgets import QApplication, QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(270, 290, 91, 23))
        self.pushButton.setObjectName("pushButton")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(230, 160, 91, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(320, 60, 191, 31))
        self.label_2.setStyleSheet("font: 11pt \"华文中宋\";")
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 110, 111, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(130, 160, 71, 31))
        self.label.setObjectName("label")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(90, 210, 131, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(400, 290, 91, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(240, 110, 381, 31))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(240, 210, 381, 31))
        self.textBrowser_2.setObjectName("textBrowser_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 点击按钮显示文本选择框
        self.pushButton_2.clicked.connect(self.show_text_box)

        # 点击按钮显示文本选择框
        self.pushButton_3.clicked.connect(self.show_text_box_2)

        # 点击按钮播放合成视频
        self.pushButton_4.clicked.connect(self.play_video)

        # 点击按钮生成视频
        self.pushButton.clicked.connect(self.generate_video)

        # # 设置默认文本框
        # self.textBrowser.setText("请选择视频文件路径")
        #
        # # 设置默认文本框
        # self.textBrowser_2.setText("请选择合成视频存储路径")


    def show_message(self):
        # QMessageBox.information(self, "错误", "生成失败") #最后的Yes表示弹框的按钮显示为Yes，默认按钮显示为OK,不填QMessageBox.Yes即为默认
        error_dialog = QtWidgets.QMessageBox()
        error_dialog.setIcon(QtWidgets.QMessageBox.Warning)
        error_dialog.setText("请确保选择视频文件路径和保存路径！")
        error_dialog.setWindowTitle("提示")
        error_dialog.exec_()

    #点击按钮显示文本选择框
    def show_text_box(self):
        file_dialog = QtWidgets.QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self.centralwidget, "选择视频文件路径", "", "Video Files (*.mp4 *.avi *.mkv)")
        if file_path:
            self.textBrowser.setText(file_path)

    #点击按钮选择文件的存储路径并显示在文本框中
    def show_text_box_2(self):
        file_dialog = QtWidgets.QFileDialog()
        dir_path = file_dialog.getExistingDirectory(self.centralwidget, "选择合成视频存储路径", "", QFileDialog.ShowDirsOnly)
        if dir_path:
            self.textBrowser_2.setText(dir_path)

    #点击按钮播放合成视频
    def play_video(self):
        video_path = self.textBrowser_2.toPlainText()
        video_path = video_path + "/NewVideo.mp4"
        if video_path:
            os.system(f"start {video_path}")

    #点击按钮生成视频调用video_to_text.py和syntheticSpeech.py
    def generate_video(self):
        video_path = self.textBrowser.toPlainText()
        save_path = self.textBrowser_2.toPlainText()
        if video_path and save_path:
            # self.textBrowser_2.setText(save_path)
            try:
                wav_path = generateWav.run(video_path, save_path)
                print("finishi generateWav")
                #生成消音视频
                video_without_sound = addNewSound.del_audio(video_path, save_path)
                print("finish del_audio")
                #生成字幕文件——————————————————————————————————————————————————————————————————————————————————
                video_to_txt.run(wav_path, save_path)
                # 获取下拉框的内容
                comboBox_text = self.comboBox.currentText()
                filename = 'subtitle.srt'
                subtitle_file = os.path.join(save_path, filename)
                
                # 构建输出视频文件路径
                output_video_path = os.path.join(save_path, "NewVideo.mp4")
                
                # 使用统一的语音合成模块
                synthesis = unified_speech_synthesis.UnifiedSpeechSynthesis()
                
                try:
                    if comboBox_text == "中文转英文":
                        generated_video_path = synthesis.process_video(
                            video_file=video_path,
                            subtitle_file=subtitle_file,
                            output_path=output_video_path,
                            conversion_type="中文转英文"
                        )
                    elif comboBox_text == "中文转中文":
                        generated_video_path = synthesis.process_video(
                            video_file=video_path,
                            subtitle_file=subtitle_file,
                            output_path=output_video_path,
                            conversion_type="中文转中文"
                        )
                    elif comboBox_text == "英文转中文":
                        generated_video_path = synthesis.process_video(
                            video_file=video_path,
                            subtitle_file=subtitle_file,
                            output_path=output_video_path,
                            conversion_type="英文转中文"
                        )
                    elif comboBox_text == "英文转英文":
                        generated_video_path = synthesis.process_video(
                            video_file=video_path,
                            subtitle_file=subtitle_file,
                            output_path=output_video_path,
                            conversion_type="英文转英文"
                        )
                    print(f"✅ 语音合成完成: {generated_video_path}")
                except Exception as synthesis_error:
                    raise Exception(f"语音合成失败: {synthesis_error}")
            except Exception as e:
                self.show_message("生成视频过程中出现错误：" + str(e))
        else:
            self.show_message()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "语音替换工具"))
        self.pushButton.setText(_translate("MainWindow", "生成视频"))
        self.comboBox.setItemText(0, _translate("MainWindow", "中文转英文"))
        self.comboBox.setItemText(1, _translate("MainWindow", "中文转中文"))
        self.comboBox.setItemText(2, _translate("MainWindow", "英文转中文"))
        self.comboBox.setItemText(3, _translate("MainWindow", "英文转英文"))
        self.label_2.setText(_translate("MainWindow", "双语课程语音替换"))
        self.pushButton_2.setText(_translate("MainWindow", "选择视频文件路径"))
        self.label.setText(_translate("MainWindow", "选择转换类型"))
        self.pushButton_3.setText(_translate("MainWindow", "选择合成视频存储路径"))
        self.pushButton_4.setText(_translate("MainWindow", "播放合成视频"))

# 创建一个异常处理器
def handle_exception(exc_type, exc_value, exc_traceback):
    message = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    error_dialog = QMessageBox()
    error_dialog.setIcon(QMessageBox.Critical)
    error_dialog.setText("An error has occurred: " + message)
    error_dialog.setWindowTitle("Error")
    error_dialog.exec_()

if __name__ == "__main__":
    # 将异常处理器安装到sys.excepthook中
    sys.excepthook = handle_exception
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

